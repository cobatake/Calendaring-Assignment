import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;
/**
 * 
 * @author Cynthia
 * PossibleFreeTime Events
 */
public class PossibleFreeTimeEvents {

  private class TimeBlockComparator implements Comparator<TimeBlock> {
    @Override
    public int compare(TimeBlock timeBlock1, TimeBlock timeBlock2) {
      return timeBlock1.getStartTime().compareTo(timeBlock1.getStartTime());
    }
  }

  private final TimeBlockComparator TIME_BLOCK_COMPARATOR = new TimeBlockComparator();
  private ArrayList<TimeBlock> busyTimes;


  public PossibleFreeTimeEvents() {
    busyTimes = new ArrayList<>();
  }


  /** Given a .ics file, open it and remember it as a busy time. */
  public void addBusyTime(String filename) throws IOException {
    File file = new File(filename);
    TimeBlock timeBlock = new TimeBlock();
    BufferedReader br = new BufferedReader(new FileReader(file));
    String line;

    while ((line = br.readLine()) != null) {
      String[] tokens = line.split(":");

      if (tokens[0].startsWith("DTSTART")) {
        // Get the timezone
        timeBlock.setTimezone(tokens[0].split("=")[1]);

        // Get the date.
        timeBlock.setStartDate(tokens[1].split("T")[0]);

        // Get the time.
        timeBlock.setStartTime(tokens[1].split("T")[1]);

      }
      else if (tokens[0].startsWith("DTEND")) {
        // Get the timezone
        timeBlock.setTimezone(tokens[0].split("=")[1]);

        // Get the date.
        timeBlock.setEndDate(tokens[1].split("T")[0]);

        // Get the time.
        timeBlock.setEndTime(tokens[1].split("T")[1]);

      }
      else if (tokens[0].startsWith("PRIORITY")) {
        // Get the priority
        timeBlock.setPriority(tokens[1]);
      }
    }
    busyTimes.add(timeBlock);
  }


  /** Returns a sorted list of Time blocks by start time which represent both Free and Busy tiems. */
  public ArrayList<TimeBlock> getFullCalendar() throws DatesDoNotMatchExeption, IncorrectTimezone {
    // Sort all busy times by start time.
    Collections.sort(busyTimes, TIME_BLOCK_COMPARATOR);

    ArrayList<TimeBlock> allTimes = new ArrayList<>();

    String date = "";
    String timezone = "Pacific/Honolulu";

    // Free time starts at midnight of the next day.
    String freeTimeStart = "000000";

    if (busyTimes.size() > 0) {
      date = busyTimes.get(0).getStartDate();
    }

    for (TimeBlock busyTime : busyTimes) {
      // The date should always be the same for all dates!!
      if (!busyTime.getStartDate().equals(date) || !busyTime.getEndDate().equals(date)) {
        throw new DatesDoNotMatchExeption();
      }

      // Timezone should be hawaii.
      if (!busyTime.getTimezone().equals(timezone)) {
        throw new IncorrectTimezone();
      }

      if (freeTimeStart.compareTo(busyTime.getStartTime()) < 0) {
        TimeBlock freeTime = createFreeTimeBlock(date, freeTimeStart, busyTime.getStartTime());
        allTimes.add(freeTime);

        // Update the new free time to be the end time of the busy time.
        freeTimeStart = busyTime.getEndTime();

      }
      else if (freeTimeStart.equals(busyTime.getStartTime())) {
        // Free time start is the same as the busy time start time. Therefore there is no free time.
        // Since there's no free time, freeTimeStart should now just be the busy time's end time.
        freeTimeStart = busyTime.getEndTime();

      }
      else {
        // |----|
        // |---------------|
        // |------------|
        // |---|
        // Take the max of freeStartTime and busyTime's end time. Since they're overlapping the max
        // will give us the earliest next free time.
        freeTimeStart = (freeTimeStart.compareTo(busyTime.getEndTime()) > 0) ? freeTimeStart : busyTime.getEndTime();
      }

      allTimes.add(busyTime);
    }

    // We want to add free time for last busy time's end time until 240000, but we need to make sure that
    // the last busy time's end time is not already 240000.
    if (!freeTimeStart.equals("240000")) {
      allTimes.add(createFreeTimeBlock(date, freeTimeStart, "240000"));
    }

    return allTimes;
  }


  private TimeBlock createFreeTimeBlock(String date, String startTime, String endTime) {
    TimeBlock timeBlock = new TimeBlock();
    timeBlock.setStartDate(date);
    timeBlock.setStartTime(startTime);
    timeBlock.setEndDate(date);
    timeBlock.setEndTime(endTime);
    timeBlock.setTimezone("Pacific/Honolulu");
    timeBlock.setPriority("9");
    return timeBlock;
  }
}

class DatesDoNotMatchExeption extends Exception {
  public DatesDoNotMatchExeption() {
    super("Dates do not match!!");
  }
}

class IncorrectTimezone extends Exception {
  public IncorrectTimezone() {
    super("Timezone is not Pacific/Honolulu!!");
  }
}
